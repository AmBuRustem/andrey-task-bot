import os
import logging
import threading
from flask import Flask
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import gspread
import json
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
google_creds = json.loads(os.environ["GOOGLE_CREDS_JSON"])
creds = ServiceAccountCredentials.from_json_keyfile_dict(google_creds, scope)
client = gspread.authorize(creds)
spreadsheet_id = os.environ["SPREADSHEET_ID"]
sheet = client.open_by_key(spreadsheet_id).sheet1

# Telegram —Ç–æ–∫–µ–Ω
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ê–Ω–¥—Ä–µ–π, —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –∑–∞–¥–∞—á. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/new –ó–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/done 1 ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É 1\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

async def new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_text = " ".join(context.args)
    if not task_text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: /new –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ")
        return
    sheet.append_row([task_text, "üïí –í –ø—Ä–æ—Ü–µ—Å—Å–µ"])
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}")

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = sheet.get_all_values()
    if not rows:
        await update.message.reply_text("–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    msg = ""
    for i, row in enumerate(rows, start=1):
        msg += f"{i}. {row[0]} ‚Äî {row[1]}\n"
    await update.message.reply_text(msg)

async def done_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: /done 2")
        return
    try:
        idx = int(context.args[0])
        sheet.update_cell(idx, 2, "‚úÖ –ì–æ—Ç–æ–≤–æ")
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ ‚Ññ{idx} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    except:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–≤—ë–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")

# Flask ‚Äî –¥–ª—è Render (–æ–Ω —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Ä—Ç)
app = Flask(__name__)

@app.route('/')
def index():
    return "–ë–æ—Ç –ê–Ω–¥—Ä–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

# –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
flask_thread = threading.Thread(target=run_flask)
flask_thread.start()

# –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
async def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("new", new_task))
    application.add_handler(CommandHandler("list", list_tasks))
    application.add_handler(CommandHandler("done", done_task))

    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
