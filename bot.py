import logging
import json
import os
import time
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"],
        ["‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", "‚ùì –ü–æ–º–æ—â—å"]
    ],
    resize_keyboard=True
)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
google_creds = json.loads(GOOGLE_CREDS_JSON)
creds = ServiceAccountCredentials.from_json_keyfile_dict(google_creds, scope)
client = gspread.authorize(creds)
sheet = client.open("Andrey Tasks").sheet1

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
ADDING_TASK = 1

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ê–Ω–¥—Ä–µ–π, —Ç–≤–æ–π –±–æ—Ç –¥–ª—è –∑–∞–¥–∞—á. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.\n–ò–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

# –°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async def handle_add_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    return ADDING_TASK

async def handle_task_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = update.message.text
    user_id = update.message.from_user.id
    sheet.append_row([str(user_id), task, "FALSE"])
    await update.message.reply_text("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=keyboard)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞$"), handle_add_button)],
        states={ADDING_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task_input)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(conv_handler)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
